// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Role {
  USER
  ADMIN
}

model User {
  id         String    @id @default(uuid())
  name       String?
  email      String    @unique
  password   String
  role       Role      @default(USER)
  image      String    @default("https://res.cloudinary.com/dgf7oj85d/image/upload/v1713201314/placeholder/user_placeholder_imcsu4.jpg")
  blogs      Blog[]
  Comment    Comment[]
  Like       Like[]
  created_at DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
}

model Blog {
  id         String    @id @default(uuid())
  title      String
  content    String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  like_count Int       @default(0)
  tags       Tag[]
  comments   Comment[]
  Like       Like[]
  created_at DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
}

model Tag {
  id         String   @id @default(uuid())
  name       String
  blogs      Blog[]
  created_at DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

model Comment {
  id         String   @id @default(uuid())
  content    String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  blog       Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId     String
  created_at DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

model Like {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  blog       Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId     String
  created_at DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}
